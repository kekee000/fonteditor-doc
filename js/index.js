!function(t){var n={};function e(o){if(n[o])return n[o].exports;var r=n[o]={i:o,l:!1,exports:{}};return t[o].call(r.exports,r,r.exports,e),r.l=!0,r.exports}e.m=t,e.c=n,e.d=function(t,n,o){e.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:o})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,n){if(1&n&&(t=e(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var o=Object.create(null);if(e.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var r in t)e.d(o,r,function(n){return t[n]}.bind(null,r));return o},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},e.p="",e(e.s=4)}([function(t,n,e){var o=e(1);"string"==typeof o&&(o=[[t.i,o,""]]);var r={insert:"head",singleton:!1};e(3)(o,r);o.locals&&(t.exports=o.locals)},function(t,n,e){(t.exports=e(2)(!1)).push([t.i,'body {\n  font-family: "Microsoft YaHei", sans-serif;\n}\n.navbar-inverse .navbar-brand {\n  color: #FFF;\n}\n.navbar-inverse .forkme {\n  position: absolute;\n  right: 5px;\n  top: 5px;\n  color: #FFF;\n}\n.fonteditor-container {\n  margin-top: 50px;\n}\n.sidebar-fonteditor {\n  position: fixed;\n  width: 200px;\n  margin: 15px;\n}\n.main-container {\n  margin: 15px 0 0 230px;\n  overflow: hidden;\n}\n.main-container section {\n  margin-top: 60px;\n}\n.main-container section .setting {\n  font-style: normal;\n  font-weight: bold;\n  color: #F00;\n}\n.main-container section em {\n  font-style: normal;\n  color: #F00;\n}\n.main-container section:first-child {\n  margin-top: 0;\n}\n',""])},function(t,n,e){"use strict";t.exports=function(t){var n=[];return n.toString=function(){return this.map((function(n){var e=function(t,n){var e=t[1]||"",o=t[3];if(!o)return e;if(n&&"function"==typeof btoa){var r=(s=o,a=btoa(unescape(encodeURIComponent(JSON.stringify(s)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),"/*# ".concat(c," */")),i=o.sources.map((function(t){return"/*# sourceURL=".concat(o.sourceRoot).concat(t," */")}));return[e].concat(i).concat([r]).join("\n")}var s,a,c;return[e].join("\n")}(n,t);return n[2]?"@media ".concat(n[2],"{").concat(e,"}"):e})).join("")},n.i=function(t,e){"string"==typeof t&&(t=[[null,t,""]]);for(var o={},r=0;r<this.length;r++){var i=this[r][0];null!=i&&(o[i]=!0)}for(var s=0;s<t.length;s++){var a=t[s];null!=a[0]&&o[a[0]]||(e&&!a[2]?a[2]=e:e&&(a[2]="(".concat(a[2],") and (").concat(e,")")),n.push(a))}},n}},function(t,n,e){"use strict";var o,r={},i=function(){return void 0===o&&(o=Boolean(window&&document&&document.all&&!window.atob)),o},s=function(){var t={};return function(n){if(void 0===t[n]){var e=document.querySelector(n);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(t){e=null}t[n]=e}return t[n]}}();function a(t,n){for(var e=[],o={},r=0;r<t.length;r++){var i=t[r],s=n.base?i[0]+n.base:i[0],a={css:i[1],media:i[2],sourceMap:i[3]};o[s]?o[s].parts.push(a):e.push(o[s]={id:s,parts:[a]})}return e}function c(t,n){for(var e=0;e<t.length;e++){var o=t[e],i=r[o.id],s=0;if(i){for(i.refs++;s<i.parts.length;s++)i.parts[s](o.parts[s]);for(;s<o.parts.length;s++)i.parts.push(v(o.parts[s],n))}else{for(var a=[];s<o.parts.length;s++)a.push(v(o.parts[s],n));r[o.id]={id:o.id,refs:1,parts:a}}}}function l(t){var n=document.createElement("style");if(void 0===t.attributes.nonce){var o=e.nc;o&&(t.attributes.nonce=o)}if(Object.keys(t.attributes).forEach((function(e){n.setAttribute(e,t.attributes[e])})),"function"==typeof t.insert)t.insert(n);else{var r=s(t.insert||"head");if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}return n}var h,u=(h=[],function(t,n){return h[t]=n,h.filter(Boolean).join("\n")});function f(t,n,e,o){var r=e?"":o.css;if(t.styleSheet)t.styleSheet.cssText=u(n,r);else{var i=document.createTextNode(r),s=t.childNodes;s[n]&&t.removeChild(s[n]),s.length?t.insertBefore(i,s[n]):t.appendChild(i)}}function d(t,n,e){var o=e.css,r=e.media,i=e.sourceMap;if(r&&t.setAttribute("media",r),i&&btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleSheet)t.styleSheet.cssText=o;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(o))}}var p=null,m=0;function v(t,n){var e,o,r;if(n.singleton){var i=m++;e=p||(p=l(n)),o=f.bind(null,e,i,!1),r=f.bind(null,e,i,!0)}else e=l(n),o=d.bind(null,e,n),r=function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)};return o(t),function(n){if(n){if(n.css===t.css&&n.media===t.media&&n.sourceMap===t.sourceMap)return;o(t=n)}else r()}}t.exports=function(t,n){(n=n||{}).attributes="object"==typeof n.attributes?n.attributes:{},n.singleton||"boolean"==typeof n.singleton||(n.singleton=i());var e=a(t,n);return c(e,n),function(t){for(var o=[],i=0;i<e.length;i++){var s=e[i],l=r[s.id];l&&(l.refs--,o.push(l))}t&&c(a(t,n),n);for(var h=0;h<o.length;h++){var u=o[h];if(0===u.refs){for(var f=0;f<u.parts.length;f++)u.parts[f]();delete r[u.id]}}}}},function(t,n,e){"use strict";e.r(n);e(0);class o{static getScrollTop(){return window.pageYOffset||document.body.scrollTop||document.documentElement.scrollTop}constructor(t,n){this.main=t||window,this.throttle=n.throttle||50,this.selector=n.selector||"[data-anchor]",this.anchorOffset=n.anchorOffset||0,Object.assign(this,n),this._onScroll=this._onScroll.bind(this),this._scrollChange=this._scrollChange.bind(this),this.init()}_scrollChange(){let t=0;t=this.main===window?o.getScrollTop():this.main.scrollTop,this.onScrollChange&&this.onScrollChange({top:t,target:this.main});let n=this.anchorPos,e=n.length;for(;--e&&t<n[e][0];);let r=n[e][1],i=this.anchors[r];this.onAnchorChange&&this.onAnchorChange({top:t,target:i,anchor:i.attr("data-anchor")})}_onScroll(){clearTimeout(this.scrollTimer),this.scrollTimer=setTimeout(this._scrollChange,this.throttle)}init(){let t=[],n=this.main===window?document.body:this.main;$(n).find(this.selector).each((function(n,e){t[n]=$(e)})),this.anchors=t,this.anchors.length&&(this.refresh(),this.start())}getAnchorPos(t){return t.offset().top+this.anchorOffset}refresh(){let t=this,n=[],e=0;$(this.anchors).each((function(o,r){"none"!==r.css("display")&&(n[e++]=[t.getAnchorPos(r),o])})),this.anchorPos=n.sort((t,n)=>t[0]-n[0])}start(){return this._binded||($(this.main).on("scroll",this._onScroll),this._binded=!0),this}stop(){return clearTimeout(this.scrollTimer),this._binded&&($(this.main).off("scroll",this._onScroll),this._binded=!1),this}check(){this._scrollChange()}dispose(){clearTimeout(this.scrollTimer),$(this.main).off("scroll",this._onScroll),this.anchors=null,this.anchorPos=null,this.main=null}}!function(){const t=$("#sidebar"),n=new o(window,{selector:"section[data-anchor]",anchorOffset:-71,onAnchorChange(n){t.find(".active").removeClass("active"),t.find('[href*="#'+n.anchor+'"]').addClass("active")}}),e=function(e){let o;e&&(o=$('[data-anchor="'+e+'"]')).length&&(n.stop(),function(t,n){n=Object.assign({top:0,duration:200,easing:"swing"},n);const e=window.chrome?document.documentElement:document.body;if(!n.noAnim)return $(e).animate({scrollTop:$(t).offset().top+n.top},n.duration,n.easing,n.onFinish);$(e).get(0).scrollTop=$(t).offset().top+n.top}(o,{top:-70,onFinish(){location.hash=e,t.find(".active").removeClass("active"),t.find('[href*="#'+e+'"]').addClass("active"),n.start()}}))};t.on("click","[href]",(function(t){t.preventDefault();let n=this.href.slice(this.href.lastIndexOf("#")+1);n&&e(n)})),$(window).on("load",(function(){n.refresh(),location.hash&&e(location.hash.slice(1))}))}()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,